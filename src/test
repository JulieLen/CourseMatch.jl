

function demand(price, pref, budget, capacity)

	demand = []

	M = length(pref)

	for i in 1:M

		N = size(Ind_pref[i])[1]

		let
			# Maximization problem
			m = Model(solver=GurobiSolver())

			@variable(m, x[1:N], Bin)

			# Objective: maximize utility
			@objective(m, Max, x'*pref[i]*x)

			# Constraints:

			#Should have exactly 3 classes
			@constraint(m, sum(x) == capacity[i])

			#Should not spend more than one's budget
			@constraint(m,  dot(price, x) <= budget[i])

			# Solve problem using MIP solver
			status = solve(m)
			push!(demand, getvalue(x))
		end

	end

	return Dict("ind_demand" => demand,
					"total_demand" => sum(demand) )

end


## Example : 20 individuals, 10 classes to choose from, exactly 3 classes to attend, NO CROSS PREFERENCES


Ind_pref = []
for i in 1:20
	push!(Ind_pref, sparse(collect(1:10), collect(1:10), rand(0:100, 10)))
end


ind_budget = rand(150:200, 20)
price = rand(Float32, 10)
cap = fill(3, 20)

demand(price, Ind_pref, ind_budget, cap)
